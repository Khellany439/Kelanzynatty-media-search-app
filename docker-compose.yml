version: '3.8'

services:
  # Database
  db:
    image: postgres:14-alpine
    container_name: media_search_db
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-media_search}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    networks:
      - media-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: media_search_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - media-network

  # Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: media_search_backend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 5000
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-media_search}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret}
      REDIS_URL: redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - media-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: media_search_frontend
    environment:
      - VITE_API_URL=${API_URL:-http://localhost:5000}
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "80:80"
    networks:
      - media-network

  # Monitoring (Production only)
  prometheus:
    image: prom/prometheus
    container_name: media_search_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - media-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: media_search_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - media-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  grafana_data:

networks:
  media-network:
    driver: bridge