/**
 * APPLICATION ROUTING MODULE
 * DEFINES AND CONFIGURES EXPRESS ROUTES FOR AUTHENTICATION ENDPOINTS.
 * CENTRALIZES ROUTE DEFINITIONS AND HANDLERS FOR MAINTAINABILITY AND SCALABILITY.
 * 
 * KEY RESPONSIBILITIES:
 * - ROUTE PATH DEFINITIONS
 * - HANDLER FUNCTION ASSIGNMENT
 * - MIDDLEWARE ORGANIZATION
 * - API ENDPOINT DOCUMENTATION
 * 
 * DEPENDENCIES:
 * - EXPRESS: WEB FRAMEWORK FOR ROUTE HANDLING
 * - AUTH MODULE: CONTAINS AUTHENTICATION BUSINESS LOGIC
 * 
 * AUTHOR: Kelanzy
 * DATE: 2025-5-3
 * VERSION: 1.0.0
 * REQUIREMENTS:
 * - EXPRESS ROUTER MUST BE MOUNTED IN MAIN SERVER
 * - AUTH HANDLERS MUST BE PROPERLY IMPLEMENTED
 */

const express = require('express'); // IMPORT EXPRESS FRAMEWORK FOR ROUTING
const { registerUser, loginUser } = require('./auth'); // IMPORT AUTH CONTROLLER FUNCTIONS

/**
 * EXPRESS ROUTER INSTANCE
 * PROVIDES MODULAR ROUTE CONFIGURATION AND ISOLATED MIDDLEWARE STACK
 * @type {express.Router}
 */
const router = express.Router();

/**
 * USER REGISTRATION ENDPOINT
 * 
 * PATH: POST /register
 * PURPOSE: CREATES NEW USER ACCOUNT WITH SECURE CREDENTIAL STORAGE
 * 
 * REQUEST BODY FORMAT:
 * {
 *   "username": "string (required, unique)",
 *   "password": "string (required, min length 8)"
 * }
 * 
 * RESPONSES:
 * - 201 CREATED: SUCCESSFUL REGISTRATION (RETURNS USER OBJECT)
 * - 409 CONFLICT: USERNAME ALREADY EXISTS
 * - 500 INTERNAL SERVER ERROR: REGISTRATION FAILURE
 * 
 * SECURITY CONSIDERATIONS:
 * - ENDPOINT SHOULD BE RATE LIMITED TO PREVENT BRUTE FORCE ATTACKS
 * - SHOULD BE PROTECTED BY RECAPTCHA IN PRODUCTION ENVIRONMENTS
 */
router.post('/register', registerUser);

/**
 * USER AUTHENTICATION ENDPOINT
 * 
 * PATH: POST /login
 * PURPOSE: VERIFIES CREDENTIALS AND ISSUES JWT FOR SESSION MANAGEMENT
 * 
 * REQUEST BODY FORMAT:
 * {
 *   "username": "string (required)",
 *   "password": "string (required)"
 * }
 * 
 * RESPONSES:
 * - 200 OK: SUCCESSFUL LOGIN (RETURNS JWT TOKEN)
 * - 401 UNAUTHORIZED: INVALID CREDENTIALS
 * - 500 INTERNAL SERVER ERROR: AUTHENTICATION FAILURE
 * 
 * SECURITY CONSIDERATIONS:
 * - FAILED ATTEMPTS SHOULD BE LOGGED AND MONITORED
 * - TOKENS SHOULD BE TRANSMITTED OVER HTTPS ONLY
 */
router.post('/login', loginUser);

/**
 * MODULE EXPORTS
 * EXPORTS CONFIGURED EXPRESS ROUTER FOR INTEGRATION WITH MAIN APPLICATION
 * @exports {express.Router} ROUTER WITH AUTH ENDPOINTS
 */
module.exports = router;

/**
 * ROUTE DESIGN RATIONALE:
 * 1. RESTFUL DESIGN: FOLLOWS STANDARD HTTP VERBS AND STATUS CODES
 * 2. SEPARATION OF CONCERNS: BUSINESS LOGIC DELEGATED TO AUTH MODULE
 * 3. SCALABILITY: MODULAR STRUCTURE FOR EASY ADDITION OF NEW ROUTES
 * 4. SECURITY: SENSITIVE ENDPOINTS ISOLATED FOR TARGETED PROTECTION
 * 
 * FUTURE ENHANCEMENTS:
 * - ADD OPENAPI SPECIFICATION FOR DOCUMENTATION
 * - IMPLEMENT REQUEST VALIDATION MIDDLEWARE
 * - ADD AUDIT LOGGING FOR AUTH EVENTS
 * - INTEGRATE OAUTH2 PROVIDER ROUTES
 * 
 * MIDDLEWARE INTEGRATION GUIDE:
 * 1. RATE LIMITING: APPLY express-rate-limit TO AUTH ROUTES
 * 2. VALIDATION: USE express-validator FOR INPUT SANITIZATION
 * 3. CORS: CONFIGURE SPECIFIC ORIGINS FOR API ENDPOINTS
 * 4. MONITORING: INTEGRATE REQUEST/RESPONSE LOGGING
 * 
 * EXAMPLE MIDDLEWARE STACK:
 * router.post('/register',
 *   validateCredentials, // CUSTOM VALIDATION MIDDLEWARE
 *   rateLimiter,         // RATE LIMITING MIDDLEWARE
 *   registerUser         // BUSINESS LOGIC HANDLER
 * );
 */

/**
 * ERROR HANDLING STRATEGY:
 * 1. PROPAGATE ERRORS TO CENTRAL ERROR HANDLER
 * 2. MAINTAIN CONSISTENT ERROR RESPONSE FORMAT
 * 3. IMPLEMENT SAFE ERROR MESSAGES FOR PRODUCTION
 * 
 * SUGGESTED ERROR FORMAT:
 * {
 *   "error": "GENERIC_ERROR_MESSAGE",
 *   "code": "APPLICATION_ERROR_CODE",
 *   "details": "DEBUG_INFO_DEVELOPMENT_ONLY"
 * }
 */

/**
 * RELATED MODULES:
 * - server.js: MOUNTS THE ROUTER TO SPECIFIED BASE PATH
 * - auth.js: CONTAINS ROUTE HANDLER IMPLEMENTATIONS
 * - middleware.js: POTENTIAL LOCATION FOR ROUTE MIDDLEWARE
 */
