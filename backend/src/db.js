/**
 * DATABASE CONNECTION MODULE
 * THIS MODULE CONFIGURES AND EXPORTS A POSTGRESQL CONNECTION POOL FOR EFFICIENT
 * DATABASE OPERATIONS. IT CENTRALIZES DB CONNECTIVITY SETTINGS AND PROVIDES
 * A QUERY INTERFACE FOR EXECUTING SQL STATEMENTS.
 * 
 * KEY FEATURES:
 * - ENVIRONMENT-BASED CONNECTION CONFIGURATION
 * - CONNECTION POOLING FOR PERFORMANCE OPTIMIZATION
 * - UNIFIED QUERY INTERFACE FOR SAFE PARAMETERIZED QUERIES
 * 
 * AUTHOR: JOHN DOE
 * DATE: 2023-10-15
 * VERSION: 1.0.0
 * REQUIREMENTS:
 * - POSTGRESQL DATABASE (PG PACKAGE)
 * - DATABASE_URL ENVIRONMENT VARIABLE CONFIGURED
 */

const { Pool } = require('pg'); // IMPORT POSTGRESQL CLIENT LIBRARY

/**
 * POSTGRESQL CONNECTION POOL INSTANCE
 * CONFIGURED USING DATABASE_URL FROM ENVIRONMENT VARIABLES.
 * THE POOL MAINTAINS REUSABLE CONNECTIONS TO AVOID CONNECTION OVERHEAD.
 * 
 * POOL CONFIGURATION:
 * - MAX CONNECTIONS DETERMINED BY POSTGRESQL SERVER SETTINGS
 * - IDLE CONNECTIONS AUTOMATICALLY CLOSED AFTER DEFAULT 10 SECONDS
 * - SSL CONFIGURATION HANDLED AUTOMATICALLY BY HEROKU-STYLE ENVIRONMENTS
 */
const pool = new Pool({
    connectionString: process.env.DATABASE_URL, // SECURELY FETCH CONNECTION STRING FROM ENVIRONMENT
    // SSL: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

/**
 * UNIVERSAL QUERY EXECUTION INTERFACE
 * PROVIDES SAFE PARAMETERIZED QUERY EXECUTION WITH AUTOMATIC CONNECTION MANAGEMENT.
 * 
 * PARAMETERS:
 * @param {string} text - SQL QUERY STRING (CAN INCLUDE PARAMETER PLACEHOLDERS $1, $2, etc.)
 * @param {Array} params - ARRAY OF PARAMETER VALUES FOR PARAMETERIZED QUERIES
 * 
 * RETURNS:
 * @returns {Promise<QueryResult>} POSTGRESQL QUERY RESULT OBJECT CONTAINING ROWS AND METADATA
 * 
 * USAGE EXAMPLE:
 * const result = await query('SELECT * FROM users WHERE id = $1', [userId]);
 * 
 * SECURITY NOTE:
 * ALWAYS USE PARAMETERIZED QUERIES TO PREVENT SQL INJECTION ATTACKS
 */
module.exports = {
    query: (text, params) => pool.query(text, params), // DELEGATE TO POOL'S QUERY METHOD
    
    // OPTIONAL: EXPOSE POOL FOR SPECIAL OPERATIONS (ADVANCED USE CASES)
    pool: pool
};

/**
 * CONNECTION LIFECYCLE MANAGEMENT NOTES:
 * - POOL AUTOMATICALLY ACQUIRES/RELEASES CONNECTIONS FOR EACH QUERY
 * - SHUTDOWN HOOKS SHOULD BE ADDED TO GRACEFULLY CLOSE THE POOL
 *   ON PROCESS TERMINATION (SEE BELOW EXAMPLE)
 * 
 * EXAMPLE SHUTDOWN HANDLER:
 * process.on('SIGINT', () => {
 *     pool.end().then(() => console.log('POOL HAS ENDED'))
 *         .catch(err => console.error('ERROR ENDING POOL:', err));
 * });
 */

/**
 * ERROR HANDLING STRATEGY:
 * - QUERY ERRORS PROPAGATE TO CALLER FOR CONTEXT-SPECIFIC HANDLING
 * - POOL 'ERROR' EVENTS SHOULD BE HANDLED GLOBALLY FOR CONNECTION ISSUES
 * 
 * EXAMPLE ERROR LISTENER:
 * pool.on('error', (err) => {
 *     console.error('UNEXPECTED POOL ERROR:', err);
 *     // IMPLEMENT RECONNECTION LOGIC OR ALERTING HERE
 * });
 */
