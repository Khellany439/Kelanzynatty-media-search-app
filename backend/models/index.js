/**
 * SEQUELIZE MODEL CONFIGURATION MODULE
 * CENTRALIZED MODEL DEFINITION AND DATABASE INSTANCE MANAGEMENT.
 * INITIALIZES ALL APPLICATION MODELS AND EXPORTS CONFIGURED SEQUELIZE INSTANCE.
 * 
 * KEY RESPONSIBILITIES:
 * - SEQUELIZE LIBRARY AND INSTANCE MANAGEMENT
 * - MODEL DEFINITION AND REGISTRATION
 * - DATABASE SCHEMA RELATIONSHIP CONFIGURATION
 * 
 * AUTHOR: KELANZY
 * DATE: 2023-10-23
 * VERSION: 1.0.0
 * REQUIREMENTS:
 * - SEQUELIZE INSTANCE CONFIGURED IN config/db.js
 * - MODEL DEFINITION FILES IN models DIRECTORY
 */

const User = require('./user');
const Sequelize = require('sequelize');
const sequelize = require('../config/db'); // DATABASE CONNECTION INSTANCE
const SearchHistory = require('./searchHistory');

/**
 * DATABASE OBJECT CONTAINER
 * PROVIDES ACCESS TO SEQUELIZE COMPONENTS AND MODEL INSTANCES
 * @type {Object}
 * @property {Sequelize} Sequelize - SEQUELIZE LIBRARY
 * @property {Sequelize} sequelize - CONFIGURED DATABASE INSTANCE
 * @property {Model} User - USER MODEL INSTANCE
 * @property {Model} SearchHistory - SEARCH HISTORY MODEL INSTANCE
 */
const db = {
    User, SearchHistory
};

// EXPOSE SEQUELIZE COMPONENTS
db.Sequelize = Sequelize;
db.sequelize = sequelize;

/**
 * MODEL INITIALIZATION
 * REGISTERS EACH MODEL WITH THE SEQUELIZE INSTANCE
 * 
 * USER MODEL:
 * - REQUIRES ./user MODEL DEFINITION FILE
 * - PASSES SEQUELIZE INSTANCE AND DATA TYPES
 * 
 * SEARCH HISTORY MODEL:
 * - REQUIRES ./searchHistory MODEL DEFINITION FILE
 * - PASSES SEQUELIZE INSTANCE AND DATA TYPES
 */
db.User = User;
db.SearchHistory = SearchHistory;

/**
 * MODEL RELATIONSHIPS
 * DEFINE ASSOCIATIONS BETWEEN MODELS HERE
 * 
 * EXAMPLE:
 * db.User.hasMany(db.SearchHistory, { foreignKey: 'user_id' });
 * db.SearchHistory.belongsTo(db.User, { foreignKey: 'user_id' });
 */

/**
 * DATABASE SYNCHRONIZATION
 * OPTIONAL SYNC OPERATION FOR DEVELOPMENT ENVIRONMENTS
 * 
 * DEVELOPMENT USAGE:
 * sequelize.sync({ force: true }) // DROPS TABLES AND RECREATES
 *   .then(() => console.log('DATABASE SYNCED'))
 *   .catch(err => console.error('SYNC ERROR:', err));
 */


module.exports = db;

/**
 * SECURITY CONSIDERATIONS:
 * 1. USE PARAMETERIZED QUERIES THROUGH SEQUELIZE
 * 2. VALIDATE MODEL INPUTS WITH SCHEMA CONSTRAINTS
 * 3. IMPLEMENT FIELD SANITIZATION IN MODEL HOOKS
 * 
 * PERFORMANCE TIPS:
 * 1. ADD INDEXES FOR FREQUENTLY QUERIED FIELDS
 * 2. USE LAZY LOADING FOR LARGE RELATIONSHIPS
 * 3. OPTIMIZE DATATYPES FOR STORAGE EFFICIENCY
 * 
 * ERROR HANDLING:
 * 1. IMPLEMENT MODEL VALIDATION ERRORS
 * 2. HANDLE DATABASE CONNECTION ERRORS
 * 3. USE TRANSACTIONS FOR CRITICAL OPERATIONS
 * 
 * RELATED MODULES:
 * - config/db.js: DATABASE CONNECTION CONFIGURATION
 * - models/user.js: USER MODEL DEFINITION
 * - models/searchHistory.js: SEARCH HISTORY MODEL DEFINITION
 * - migrations/: DATABASE SCHEMA MIGRATION FILES
 */

/**
 * MODEL REGISTRATION NOTES:
 * 1. EACH MODEL FILE SHOULD EXPORT A FUNCTION THAT ACCEPTS
 *    (SEQUELIZE, DATATYPES) PARAMETERS
 * 2. MODEL DEFINITIONS SHOULD INCLUDE:
 *    - FIELD DEFINITIONS WITH DATATYPES
 *    - MODEL OPTIONS AND VALIDATIONS
 *    - HOOKS FOR BUSINESS LOGIC
 * 3. ASSOCIATIONS SHOULD BE DEFINED IN SEPARATE FILE
 *    OR IN THIS CONFIGURATION MODULE
 */
