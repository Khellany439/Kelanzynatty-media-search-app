/**
 * DATABASE CONNECTION MODULE
 * CONFIGURES AND MANAGES POSTGRESQL DATABASE CONNECTIONS USING SEQUELIZE ORM.
 * PROVIDES DATABASE INSTANCE AND CONNECTION TESTING FUNCTIONALITY.
 * 
 * KEY FEATURES:
 * - ENVIRONMENT-BASED CONFIGURATION USING DOTENV
 * - CONNECTION POOL MANAGEMENT (DEFAULT SEQUELIZE SETTINGS)
 * - SILENT OPERATION IN PRODUCTION (LOGGING DISABLED)
 * - SECURE CREDENTIALS HANDLING THROUGH ENVIRONMENT VARIABLES
 * 
 * AUTHOR: KELANZY
 * DATE: 2023-10-23
 * VERSION: 1.0.0
 * REQUIREMENTS:
 * - POSTGRESQL SERVER INSTANCE
 * - PG PACKAGE INSTALLED
 * - VALID ENVIRONMENT VARIABLES SET
 */

const { Sequelize } = require('sequelize');
require('dotenv').config(); // LOAD ENVIRONMENT VARIABLES

/**
 * SEQUELIZE DATABASE INSTANCE
 * CONFIGURED WITH ENVIRONMENT VARIABLES FOR FLEXIBLE DEPLOYMENT
 * @type {Sequelize}
 */
const sequelize = new Sequelize(
    process.env.DB_NAME,    // DATABASE NAME FROM ENV
    process.env.DB_USER,    // DATABASE USER FROM ENV
    process.env.DB_PASS,    // DATABASE PASSWORD FROM ENV 
    {
        host: process.env.DB_HOST || 'localhost', // FALLBACK TO LOCALHOST
        dialect: 'postgres', // EXPLICITLY SET POSTGRES DIALECT
        logging: false,      // DISABLE SQL QUERY LOGGING BY DEFAULT
        
        // RECOMMENDED PRODUCTION SETTINGS (UNCOMMENT AS NEEDED)
        // pool: {
        //     max: 5,
        //     min: 0,
        //     acquire: 30000,
        //     idle: 10000
        // },
        // dialectOptions: {
        //     ssl: {
        //         require: true,
        //         rejectUnauthorized: false
        //     }
        // }
    }
);

/**
 * DATABASE CONNECTION TESTER
 * VERIFIES ACTIVE CONNECTION TO POSTGRESQL INSTANCE
 * @async
 * @function connectDB
 * @throws {Error} CONNECTION FAILURE ERROR
 */
const connectDB = async () => {
    try {
        await sequelize.authenticate();
        console.log('✅ POSTGRESQL CONNECTION ESTABLISHED SUCCESSFULLY.');
    } catch (error) {
        console.error('❌ DATABASE CONNECTION FAILURE:', error);
        process.exit(1); // EXIT PROCESS ON CONNECTION FAILURE
    }
};

/**
 * MODULE EXPORTS
 * EXPORTS CONFIGURED SEQUELIZE INSTANCE AND CONNECTION TESTER
 * @exports {Sequelize} sequelize - SEQUELIZE DATABASE INSTANCE
 * @exports {function} connectDB - CONNECTION VERIFICATION FUNCTION
 */
module.exports = { sequelize, connectDB };

/**
 * SECURITY CONSIDERATIONS:
 * 1. NEVER COMMIT CREDENTIALS TO VERSION CONTROL
 * 2. USE SSL CONNECTIONS IN PRODUCTION (SEE DIALECTOPTIONS)
 * 3. ROTATE DATABASE CREDENTIALS REGULARLY
 * 4. LIMIT DATABASE USER PRIVILEGES TO MINIMUM REQUIRED
 * 
 * PRODUCTION CONFIGURATION:
 * 1. ENABLE CONNECTION POOLING
 * 2. IMPLEMENT CONNECTION HEALTH CHECKS
 * 3. CONFIGURE PROPER SSL/TLS SETTINGS
 * 4. MONITOR CONNECTION LEAKS
 * 
 * DEVELOPMENT TIPS:
 * 1. SET logging: true FOR QUERY DEBUGGING
 * 2. USE SEPARATE DATABASE INSTANCES FOR DEV/TEST/PROD
 * 3. IMPLEMENT MIGRATION SCRIPTS FOR SCHEMA CHANGES
 */

/**
 * CONNECTION LIFECYCLE MANAGEMENT:
 * 1. CALL connectDB() DURING APPLICATION STARTUP
 * 2. IMPLEMENT GRACEFUL SHUTDOWN HANDLER:
 * 
 * process.on('SIGTERM', async () => {
 *     await sequelize.close();
 *     console.log('DATABASE CONNECTION CLOSED');
 * });
 * 
 * ERROR HANDLING STRATEGY:
 * 1. IMPLEMENT RETRY LOGIC FOR TRANSIENT CONNECTION ERRORS
 * 2. USE TRANSACTIONS FOR CRITICAL OPERATIONS
 * 3. MONITOR CONNECTION POOL USAGE METRICS
 */

/**
 * ENVIRONMENT VARIABLE REQUIREMENTS:
 * - DB_NAME: DATABASE NAME
 * - DB_USER: DATABASE USERNAME
 * - DB_PASS: DATABASE PASSWORD
 * - DB_HOST: DATABASE HOST (OPTIONAL)
 * 
 * OPTIONAL PARAMETERS:
 * - DB_PORT: DATABASE PORT (DEFAULT: 5432)
 * - DB_SSL: ENABLE SSL (TRUE/FALSE)
 /
